// Code generated by MockGen. DO NOT EDIT.
// Source: Domain/Interfaces/user_interfaces.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gin "github.com/gin-gonic/gin"
	gomock "github.com/golang/mock/gomock"
	dtos "github.com/google-run-code/Domain/Dtos"
	models "github.com/google-run-code/Domain/Models"
)

// MockUserController is a mock of UserController interface.
type MockUserController struct {
	ctrl     *gomock.Controller
	recorder *MockUserControllerMockRecorder
}

// MockUserControllerMockRecorder is the mock recorder for MockUserController.
type MockUserControllerMockRecorder struct {
	mock *MockUserController
}

// NewMockUserController creates a new mock instance.
func NewMockUserController(ctrl *gomock.Controller) *MockUserController {
	mock := &MockUserController{ctrl: ctrl}
	mock.recorder = &MockUserControllerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserController) EXPECT() *MockUserControllerMockRecorder {
	return m.recorder
}

// AddUserToGroup mocks base method.
func (m *MockUserController) AddUserToGroup(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddUserToGroup", c)
}

// AddUserToGroup indicates an expected call of AddUserToGroup.
func (mr *MockUserControllerMockRecorder) AddUserToGroup(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUserToGroup", reflect.TypeOf((*MockUserController)(nil).AddUserToGroup), c)
}

// CreateUser mocks base method.
func (m *MockUserController) CreateUser(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CreateUser", c)
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockUserControllerMockRecorder) CreateUser(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockUserController)(nil).CreateUser), c)
}

// DeleteUser mocks base method.
func (m *MockUserController) DeleteUser(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DeleteUser", c)
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockUserControllerMockRecorder) DeleteUser(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockUserController)(nil).DeleteUser), c)
}

// DeletetUserFromGroup mocks base method.
func (m *MockUserController) DeletetUserFromGroup(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DeletetUserFromGroup", c)
}

// DeletetUserFromGroup indicates an expected call of DeletetUserFromGroup.
func (mr *MockUserControllerMockRecorder) DeletetUserFromGroup(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletetUserFromGroup", reflect.TypeOf((*MockUserController)(nil).DeletetUserFromGroup), c)
}

// GetUserById mocks base method.
func (m *MockUserController) GetUserById(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "GetUserById", c)
}

// GetUserById indicates an expected call of GetUserById.
func (mr *MockUserControllerMockRecorder) GetUserById(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserById", reflect.TypeOf((*MockUserController)(nil).GetUserById), c)
}

// GetUsers mocks base method.
func (m *MockUserController) GetUsers(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "GetUsers", c)
}

// GetUsers indicates an expected call of GetUsers.
func (mr *MockUserControllerMockRecorder) GetUsers(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsers", reflect.TypeOf((*MockUserController)(nil).GetUsers), c)
}

// GetUsersGroup mocks base method.
func (m *MockUserController) GetUsersGroup(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "GetUsersGroup", c)
}

// GetUsersGroup indicates an expected call of GetUsersGroup.
func (mr *MockUserControllerMockRecorder) GetUsersGroup(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsersGroup", reflect.TypeOf((*MockUserController)(nil).GetUsersGroup), c)
}

// UpdateUser mocks base method.
func (m *MockUserController) UpdateUser(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UpdateUser", c)
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockUserControllerMockRecorder) UpdateUser(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockUserController)(nil).UpdateUser), c)
}

// MockUserUseCase is a mock of UserUseCase interface.
type MockUserUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockUserUseCaseMockRecorder
}

// MockUserUseCaseMockRecorder is the mock recorder for MockUserUseCase.
type MockUserUseCaseMockRecorder struct {
	mock *MockUserUseCase
}

// NewMockUserUseCase creates a new mock instance.
func NewMockUserUseCase(ctrl *gomock.Controller) *MockUserUseCase {
	mock := &MockUserUseCase{ctrl: ctrl}
	mock.recorder = &MockUserUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserUseCase) EXPECT() *MockUserUseCaseMockRecorder {
	return m.recorder
}

// AddUserToGroup mocks base method.
func (m *MockUserUseCase) AddUserToGroup(req dtos.AddUserToGroupRequest, ctx *gin.Context) (*models.ErrorResponse, string) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddUserToGroup", req, ctx)
	ret0, _ := ret[0].(*models.ErrorResponse)
	ret1, _ := ret[1].(string)
	return ret0, ret1
}

// AddUserToGroup indicates an expected call of AddUserToGroup.
func (mr *MockUserUseCaseMockRecorder) AddUserToGroup(req, ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUserToGroup", reflect.TypeOf((*MockUserUseCase)(nil).AddUserToGroup), req, ctx)
}

// AddUserToRole mocks base method.
func (m *MockUserUseCase) AddUserToRole(req dtos.AddUserToRoleRequest, ctx *gin.Context) *models.ErrorResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddUserToRole", req, ctx)
	ret0, _ := ret[0].(*models.ErrorResponse)
	return ret0
}

// AddUserToRole indicates an expected call of AddUserToRole.
func (mr *MockUserUseCaseMockRecorder) AddUserToRole(req, ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUserToRole", reflect.TypeOf((*MockUserUseCase)(nil).AddUserToRole), req, ctx)
}

// CheckEmailExists mocks base method.
func (m *MockUserUseCase) CheckEmailExists(email string, ctx *gin.Context) (*models.User, *models.ErrorResponse) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckEmailExists", email, ctx)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(*models.ErrorResponse)
	return ret0, ret1
}

// CheckEmailExists indicates an expected call of CheckEmailExists.
func (mr *MockUserUseCaseMockRecorder) CheckEmailExists(email, ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckEmailExists", reflect.TypeOf((*MockUserUseCase)(nil).CheckEmailExists), email, ctx)
}

// CreateUser mocks base method.
func (m *MockUserUseCase) CreateUser(user dtos.UserCreateRequest, ctx *gin.Context) (*dtos.UserResponseSingle, *models.ErrorResponse) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", user, ctx)
	ret0, _ := ret[0].(*dtos.UserResponseSingle)
	ret1, _ := ret[1].(*models.ErrorResponse)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockUserUseCaseMockRecorder) CreateUser(user, ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockUserUseCase)(nil).CreateUser), user, ctx)
}

// DeleteUser mocks base method.
func (m *MockUserUseCase) DeleteUser(id string, ctx *gin.Context) *models.ErrorResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", id, ctx)
	ret0, _ := ret[0].(*models.ErrorResponse)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockUserUseCaseMockRecorder) DeleteUser(id, ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockUserUseCase)(nil).DeleteUser), id, ctx)
}

// GetAllUsers mocks base method.
func (m *MockUserUseCase) GetAllUsers(ctx *gin.Context) ([]*dtos.UserResponseAll, *models.ErrorResponse) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllUsers", ctx)
	ret0, _ := ret[0].([]*dtos.UserResponseAll)
	ret1, _ := ret[1].(*models.ErrorResponse)
	return ret0, ret1
}

// GetAllUsers indicates an expected call of GetAllUsers.
func (mr *MockUserUseCaseMockRecorder) GetAllUsers(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllUsers", reflect.TypeOf((*MockUserUseCase)(nil).GetAllUsers), ctx)
}

// GetUserById mocks base method.
func (m *MockUserUseCase) GetUserById(id string, ctx *gin.Context) (*dtos.UserResponseSingle, *models.ErrorResponse) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserById", id, ctx)
	ret0, _ := ret[0].(*dtos.UserResponseSingle)
	ret1, _ := ret[1].(*models.ErrorResponse)
	return ret0, ret1
}

// GetUserById indicates an expected call of GetUserById.
func (mr *MockUserUseCaseMockRecorder) GetUserById(id, ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserById", reflect.TypeOf((*MockUserUseCase)(nil).GetUserById), id, ctx)
}

// GetUsersGroup mocks base method.
func (m *MockUserUseCase) GetUsersGroup(id string, ctx *gin.Context) ([]*dtos.GroupResponse, *models.ErrorResponse) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsersGroup", id, ctx)
	ret0, _ := ret[0].([]*dtos.GroupResponse)
	ret1, _ := ret[1].(*models.ErrorResponse)
	return ret0, ret1
}

// GetUsersGroup indicates an expected call of GetUsersGroup.
func (mr *MockUserUseCaseMockRecorder) GetUsersGroup(id, ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsersGroup", reflect.TypeOf((*MockUserUseCase)(nil).GetUsersGroup), id, ctx)
}

// RemoveUserFromGroup mocks base method.
func (m *MockUserUseCase) RemoveUserFromGroup(req dtos.RemoveUserFromGroupRequest, ctx *gin.Context) (string, *models.ErrorResponse) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveUserFromGroup", req, ctx)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(*models.ErrorResponse)
	return ret0, ret1
}

// RemoveUserFromGroup indicates an expected call of RemoveUserFromGroup.
func (mr *MockUserUseCaseMockRecorder) RemoveUserFromGroup(req, ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveUserFromGroup", reflect.TypeOf((*MockUserUseCase)(nil).RemoveUserFromGroup), req, ctx)
}

// SearchUsers mocks base method.
func (m *MockUserUseCase) SearchUsers(searchFields dtos.SearchFields, ctx *gin.Context) ([]*dtos.UserResponseAll, *models.ErrorResponse) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchUsers", searchFields, ctx)
	ret0, _ := ret[0].([]*dtos.UserResponseAll)
	ret1, _ := ret[1].(*models.ErrorResponse)
	return ret0, ret1
}

// SearchUsers indicates an expected call of SearchUsers.
func (mr *MockUserUseCaseMockRecorder) SearchUsers(searchFields, ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchUsers", reflect.TypeOf((*MockUserUseCase)(nil).SearchUsers), searchFields, ctx)
}

// UpdateUser mocks base method.
func (m *MockUserUseCase) UpdateUser(id string, user dtos.UserUpdateRequest, ctx *gin.Context) (*dtos.UserResponseSingle, *models.ErrorResponse) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", id, user, ctx)
	ret0, _ := ret[0].(*dtos.UserResponseSingle)
	ret1, _ := ret[1].(*models.ErrorResponse)
	return ret0, ret1
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockUserUseCaseMockRecorder) UpdateUser(id, user, ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockUserUseCase)(nil).UpdateUser), id, user, ctx)
}

// ValidateEmail mocks base method.
func (m *MockUserUseCase) ValidateEmail(email string) *models.ErrorResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateEmail", email)
	ret0, _ := ret[0].(*models.ErrorResponse)
	return ret0
}

// ValidateEmail indicates an expected call of ValidateEmail.
func (mr *MockUserUseCaseMockRecorder) ValidateEmail(email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateEmail", reflect.TypeOf((*MockUserUseCase)(nil).ValidateEmail), email)
}

// MockUserRepository is a mock of UserRepository interface.
type MockUserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepositoryMockRecorder
}

// MockUserRepositoryMockRecorder is the mock recorder for MockUserRepository.
type MockUserRepositoryMockRecorder struct {
	mock *MockUserRepository
}

// NewMockUserRepository creates a new mock instance.
func NewMockUserRepository(ctrl *gomock.Controller) *MockUserRepository {
	mock := &MockUserRepository{ctrl: ctrl}
	mock.recorder = &MockUserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepository) EXPECT() *MockUserRepositoryMockRecorder {
	return m.recorder
}

// AddUserToGroup mocks base method.
func (m *MockUserRepository) AddUserToGroup(req dtos.AddUserToGroupRequest, ctx *gin.Context) *models.ErrorResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddUserToGroup", req, ctx)
	ret0, _ := ret[0].(*models.ErrorResponse)
	return ret0
}

// AddUserToGroup indicates an expected call of AddUserToGroup.
func (mr *MockUserRepositoryMockRecorder) AddUserToGroup(req, ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUserToGroup", reflect.TypeOf((*MockUserRepository)(nil).AddUserToGroup), req, ctx)
}

// AddUserToRole mocks base method.
func (m *MockUserRepository) AddUserToRole(req dtos.AddUserToRoleRequest, ctx *gin.Context) *models.ErrorResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddUserToRole", req, ctx)
	ret0, _ := ret[0].(*models.ErrorResponse)
	return ret0
}

// AddUserToRole indicates an expected call of AddUserToRole.
func (mr *MockUserRepositoryMockRecorder) AddUserToRole(req, ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUserToRole", reflect.TypeOf((*MockUserRepository)(nil).AddUserToRole), req, ctx)
}

// CreateUser mocks base method.
func (m *MockUserRepository) CreateUser(user dtos.UserCreateRequest, ctx *gin.Context) (*dtos.UserResponse, *models.ErrorResponse) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", user, ctx)
	ret0, _ := ret[0].(*dtos.UserResponse)
	ret1, _ := ret[1].(*models.ErrorResponse)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockUserRepositoryMockRecorder) CreateUser(user, ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockUserRepository)(nil).CreateUser), user, ctx)
}

// DeleteUser mocks base method.
func (m *MockUserRepository) DeleteUser(id string, ctx *gin.Context) *models.ErrorResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", id, ctx)
	ret0, _ := ret[0].(*models.ErrorResponse)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockUserRepositoryMockRecorder) DeleteUser(id, ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockUserRepository)(nil).DeleteUser), id, ctx)
}

// GetAllUsers mocks base method.
func (m *MockUserRepository) GetAllUsers(ctx *gin.Context) ([]*dtos.UserResponseAll, *models.ErrorResponse) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllUsers", ctx)
	ret0, _ := ret[0].([]*dtos.UserResponseAll)
	ret1, _ := ret[1].(*models.ErrorResponse)
	return ret0, ret1
}

// GetAllUsers indicates an expected call of GetAllUsers.
func (mr *MockUserRepositoryMockRecorder) GetAllUsers(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllUsers", reflect.TypeOf((*MockUserRepository)(nil).GetAllUsers), ctx)
}

// GetUserByEmail mocks base method.
func (m *MockUserRepository) GetUserByEmail(email string, ctx *gin.Context) (*models.User, *models.ErrorResponse) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByEmail", email, ctx)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(*models.ErrorResponse)
	return ret0, ret1
}

// GetUserByEmail indicates an expected call of GetUserByEmail.
func (mr *MockUserRepositoryMockRecorder) GetUserByEmail(email, ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByEmail", reflect.TypeOf((*MockUserRepository)(nil).GetUserByEmail), email, ctx)
}

// GetUserById mocks base method.
func (m *MockUserRepository) GetUserById(id string, ctx *gin.Context) (*dtos.UserResponseSingle, *models.ErrorResponse) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserById", id, ctx)
	ret0, _ := ret[0].(*dtos.UserResponseSingle)
	ret1, _ := ret[1].(*models.ErrorResponse)
	return ret0, ret1
}

// GetUserById indicates an expected call of GetUserById.
func (mr *MockUserRepositoryMockRecorder) GetUserById(id, ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserById", reflect.TypeOf((*MockUserRepository)(nil).GetUserById), id, ctx)
}

// GetUsersGroups mocks base method.
func (m *MockUserRepository) GetUsersGroups(uid string, ctx *gin.Context) ([]*dtos.GroupResponse, *models.ErrorResponse) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsersGroups", uid, ctx)
	ret0, _ := ret[0].([]*dtos.GroupResponse)
	ret1, _ := ret[1].(*models.ErrorResponse)
	return ret0, ret1
}

// GetUsersGroups indicates an expected call of GetUsersGroups.
func (mr *MockUserRepositoryMockRecorder) GetUsersGroups(uid, ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsersGroups", reflect.TypeOf((*MockUserRepository)(nil).GetUsersGroups), uid, ctx)
}

// RemoveUserFromGroups mocks base method.
func (m *MockUserRepository) RemoveUserFromGroups(userUID string, groupUIDs []string, ctx *gin.Context) *models.ErrorResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveUserFromGroups", userUID, groupUIDs, ctx)
	ret0, _ := ret[0].(*models.ErrorResponse)
	return ret0
}

// RemoveUserFromGroups indicates an expected call of RemoveUserFromGroups.
func (mr *MockUserRepositoryMockRecorder) RemoveUserFromGroups(userUID, groupUIDs, ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveUserFromGroups", reflect.TypeOf((*MockUserRepository)(nil).RemoveUserFromGroups), userUID, groupUIDs, ctx)
}

// SearchUsers mocks base method.
func (m *MockUserRepository) SearchUsers(searchFields dtos.SearchFields, ctx *gin.Context) ([]*dtos.UserResponseAll, *models.ErrorResponse) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchUsers", searchFields, ctx)
	ret0, _ := ret[0].([]*dtos.UserResponseAll)
	ret1, _ := ret[1].(*models.ErrorResponse)
	return ret0, ret1
}

// SearchUsers indicates an expected call of SearchUsers.
func (mr *MockUserRepositoryMockRecorder) SearchUsers(searchFields, ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchUsers", reflect.TypeOf((*MockUserRepository)(nil).SearchUsers), searchFields, ctx)
}

// UpdateUser mocks base method.
func (m *MockUserRepository) UpdateUser(id string, user *dtos.UserUpdateRequest, ctx *gin.Context) (*dtos.UserResponseSingle, *models.ErrorResponse) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", id, user, ctx)
	ret0, _ := ret[0].(*dtos.UserResponseSingle)
	ret1, _ := ret[1].(*models.ErrorResponse)
	return ret0, ret1
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockUserRepositoryMockRecorder) UpdateUser(id, user, ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockUserRepository)(nil).UpdateUser), id, user, ctx)
}
