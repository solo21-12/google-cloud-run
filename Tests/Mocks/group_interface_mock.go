// Code generated by MockGen. DO NOT EDIT.
// Source: Domain/Interfaces/group_interfaces.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gin "github.com/gin-gonic/gin"
	gomock "github.com/golang/mock/gomock"
	Dtos "github.com/google-run-code/Domain/Dtos"
	Models "github.com/google-run-code/Domain/Models"
)

// MockGroupController is a mock of GroupController interface.
type MockGroupController struct {
	ctrl     *gomock.Controller
	recorder *MockGroupControllerMockRecorder
}

// MockGroupControllerMockRecorder is the mock recorder for MockGroupController.
type MockGroupControllerMockRecorder struct {
	mock *MockGroupController
}

// NewMockGroupController creates a new mock instance.
func NewMockGroupController(ctrl *gomock.Controller) *MockGroupController {
	mock := &MockGroupController{ctrl: ctrl}
	mock.recorder = &MockGroupControllerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGroupController) EXPECT() *MockGroupControllerMockRecorder {
	return m.recorder
}

// CreateGroup mocks base method.
func (m *MockGroupController) CreateGroup(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CreateGroup", c)
}

// CreateGroup indicates an expected call of CreateGroup.
func (mr *MockGroupControllerMockRecorder) CreateGroup(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGroup", reflect.TypeOf((*MockGroupController)(nil).CreateGroup), c)
}

// DeleteGroup mocks base method.
func (m *MockGroupController) DeleteGroup(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DeleteGroup", c)
}

// DeleteGroup indicates an expected call of DeleteGroup.
func (mr *MockGroupControllerMockRecorder) DeleteGroup(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGroup", reflect.TypeOf((*MockGroupController)(nil).DeleteGroup), c)
}

// GetAllGroups mocks base method.
func (m *MockGroupController) GetAllGroups(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "GetAllGroups", c)
}

// GetAllGroups indicates an expected call of GetAllGroups.
func (mr *MockGroupControllerMockRecorder) GetAllGroups(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllGroups", reflect.TypeOf((*MockGroupController)(nil).GetAllGroups), c)
}

// GetGroupById mocks base method.
func (m *MockGroupController) GetGroupById(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "GetGroupById", c)
}

// GetGroupById indicates an expected call of GetGroupById.
func (mr *MockGroupControllerMockRecorder) GetGroupById(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroupById", reflect.TypeOf((*MockGroupController)(nil).GetGroupById), c)
}

// GetGroupUsers mocks base method.
func (m *MockGroupController) GetGroupUsers(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "GetGroupUsers", c)
}

// GetGroupUsers indicates an expected call of GetGroupUsers.
func (mr *MockGroupControllerMockRecorder) GetGroupUsers(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroupUsers", reflect.TypeOf((*MockGroupController)(nil).GetGroupUsers), c)
}

// UpdateGroup mocks base method.
func (m *MockGroupController) UpdateGroup(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UpdateGroup", c)
}

// UpdateGroup indicates an expected call of UpdateGroup.
func (mr *MockGroupControllerMockRecorder) UpdateGroup(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGroup", reflect.TypeOf((*MockGroupController)(nil).UpdateGroup), c)
}

// MockGroupUseCase is a mock of GroupUseCase interface.
type MockGroupUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockGroupUseCaseMockRecorder
}

// MockGroupUseCaseMockRecorder is the mock recorder for MockGroupUseCase.
type MockGroupUseCaseMockRecorder struct {
	mock *MockGroupUseCase
}

// NewMockGroupUseCase creates a new mock instance.
func NewMockGroupUseCase(ctrl *gomock.Controller) *MockGroupUseCase {
	mock := &MockGroupUseCase{ctrl: ctrl}
	mock.recorder = &MockGroupUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGroupUseCase) EXPECT() *MockGroupUseCaseMockRecorder {
	return m.recorder
}

// CreateGroup mocks base method.
func (m *MockGroupUseCase) CreateGroup(group Dtos.GroupCreateRequest, ctx *gin.Context) (*Dtos.GroupResponse, *Models.ErrorResponse) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateGroup", group, ctx)
	ret0, _ := ret[0].(*Dtos.GroupResponse)
	ret1, _ := ret[1].(*Models.ErrorResponse)
	return ret0, ret1
}

// CreateGroup indicates an expected call of CreateGroup.
func (mr *MockGroupUseCaseMockRecorder) CreateGroup(group, ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGroup", reflect.TypeOf((*MockGroupUseCase)(nil).CreateGroup), group, ctx)
}

// DeleteGroup mocks base method.
func (m *MockGroupUseCase) DeleteGroup(id string, ctx *gin.Context) *Models.ErrorResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteGroup", id, ctx)
	ret0, _ := ret[0].(*Models.ErrorResponse)
	return ret0
}

// DeleteGroup indicates an expected call of DeleteGroup.
func (mr *MockGroupUseCaseMockRecorder) DeleteGroup(id, ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGroup", reflect.TypeOf((*MockGroupUseCase)(nil).DeleteGroup), id, ctx)
}

// GetAllGroups mocks base method.
func (m *MockGroupUseCase) GetAllGroups(ctx *gin.Context) ([]*Dtos.GroupResponse, *Models.ErrorResponse) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllGroups", ctx)
	ret0, _ := ret[0].([]*Dtos.GroupResponse)
	ret1, _ := ret[1].(*Models.ErrorResponse)
	return ret0, ret1
}

// GetAllGroups indicates an expected call of GetAllGroups.
func (mr *MockGroupUseCaseMockRecorder) GetAllGroups(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllGroups", reflect.TypeOf((*MockGroupUseCase)(nil).GetAllGroups), ctx)
}

// GetGroupById mocks base method.
func (m *MockGroupUseCase) GetGroupById(id string, ctx *gin.Context) (*Dtos.GroupResponse, *Models.ErrorResponse) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGroupById", id, ctx)
	ret0, _ := ret[0].(*Dtos.GroupResponse)
	ret1, _ := ret[1].(*Models.ErrorResponse)
	return ret0, ret1
}

// GetGroupById indicates an expected call of GetGroupById.
func (mr *MockGroupUseCaseMockRecorder) GetGroupById(id, ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroupById", reflect.TypeOf((*MockGroupUseCase)(nil).GetGroupById), id, ctx)
}

// GetGroupUsers mocks base method.
func (m *MockGroupUseCase) GetGroupUsers(id string, ctx *gin.Context) ([]Dtos.UserResponse, *Models.ErrorResponse) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGroupUsers", id, ctx)
	ret0, _ := ret[0].([]Dtos.UserResponse)
	ret1, _ := ret[1].(*Models.ErrorResponse)
	return ret0, ret1
}

// GetGroupUsers indicates an expected call of GetGroupUsers.
func (mr *MockGroupUseCaseMockRecorder) GetGroupUsers(id, ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroupUsers", reflect.TypeOf((*MockGroupUseCase)(nil).GetGroupUsers), id, ctx)
}

// UpdateGroup mocks base method.
func (m *MockGroupUseCase) UpdateGroup(id string, group Dtos.GroupUpdateRequest, ctx *gin.Context) (*Dtos.GroupResponse, *Models.ErrorResponse) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateGroup", id, group, ctx)
	ret0, _ := ret[0].(*Dtos.GroupResponse)
	ret1, _ := ret[1].(*Models.ErrorResponse)
	return ret0, ret1
}

// UpdateGroup indicates an expected call of UpdateGroup.
func (mr *MockGroupUseCaseMockRecorder) UpdateGroup(id, group, ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGroup", reflect.TypeOf((*MockGroupUseCase)(nil).UpdateGroup), id, group, ctx)
}

// MockGroupRepository is a mock of GroupRepository interface.
type MockGroupRepository struct {
	ctrl     *gomock.Controller
	recorder *MockGroupRepositoryMockRecorder
}

// MockGroupRepositoryMockRecorder is the mock recorder for MockGroupRepository.
type MockGroupRepositoryMockRecorder struct {
	mock *MockGroupRepository
}

// NewMockGroupRepository creates a new mock instance.
func NewMockGroupRepository(ctrl *gomock.Controller) *MockGroupRepository {
	mock := &MockGroupRepository{ctrl: ctrl}
	mock.recorder = &MockGroupRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGroupRepository) EXPECT() *MockGroupRepositoryMockRecorder {
	return m.recorder
}

// CreateGroup mocks base method.
func (m *MockGroupRepository) CreateGroup(group Dtos.GroupCreateRequest, ctx *gin.Context) (*Dtos.GroupResponse, *Models.ErrorResponse) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateGroup", group, ctx)
	ret0, _ := ret[0].(*Dtos.GroupResponse)
	ret1, _ := ret[1].(*Models.ErrorResponse)
	return ret0, ret1
}

// CreateGroup indicates an expected call of CreateGroup.
func (mr *MockGroupRepositoryMockRecorder) CreateGroup(group, ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGroup", reflect.TypeOf((*MockGroupRepository)(nil).CreateGroup), group, ctx)
}

// DeleteGroup mocks base method.
func (m *MockGroupRepository) DeleteGroup(id string, ctx *gin.Context) *Models.ErrorResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteGroup", id, ctx)
	ret0, _ := ret[0].(*Models.ErrorResponse)
	return ret0
}

// DeleteGroup indicates an expected call of DeleteGroup.
func (mr *MockGroupRepositoryMockRecorder) DeleteGroup(id, ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGroup", reflect.TypeOf((*MockGroupRepository)(nil).DeleteGroup), id, ctx)
}

// GetAllGroups mocks base method.
func (m *MockGroupRepository) GetAllGroups(ctx *gin.Context) ([]*Dtos.GroupResponse, *Models.ErrorResponse) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllGroups", ctx)
	ret0, _ := ret[0].([]*Dtos.GroupResponse)
	ret1, _ := ret[1].(*Models.ErrorResponse)
	return ret0, ret1
}

// GetAllGroups indicates an expected call of GetAllGroups.
func (mr *MockGroupRepositoryMockRecorder) GetAllGroups(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllGroups", reflect.TypeOf((*MockGroupRepository)(nil).GetAllGroups), ctx)
}

// GetGroupById mocks base method.
func (m *MockGroupRepository) GetGroupById(id string, ctx *gin.Context) (*Dtos.GroupResponse, *Models.ErrorResponse) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGroupById", id, ctx)
	ret0, _ := ret[0].(*Dtos.GroupResponse)
	ret1, _ := ret[1].(*Models.ErrorResponse)
	return ret0, ret1
}

// GetGroupById indicates an expected call of GetGroupById.
func (mr *MockGroupRepositoryMockRecorder) GetGroupById(id, ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroupById", reflect.TypeOf((*MockGroupRepository)(nil).GetGroupById), id, ctx)
}

// GetGroupByName mocks base method.
func (m *MockGroupRepository) GetGroupByName(name string, ctx *gin.Context) (*Dtos.GroupResponse, *Models.ErrorResponse) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGroupByName", name, ctx)
	ret0, _ := ret[0].(*Dtos.GroupResponse)
	ret1, _ := ret[1].(*Models.ErrorResponse)
	return ret0, ret1
}

// GetGroupByName indicates an expected call of GetGroupByName.
func (mr *MockGroupRepositoryMockRecorder) GetGroupByName(name, ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroupByName", reflect.TypeOf((*MockGroupRepository)(nil).GetGroupByName), name, ctx)
}

// GetGroupUsers mocks base method.
func (m *MockGroupRepository) GetGroupUsers(id string, ctx *gin.Context) ([]Dtos.UserResponse, *Models.ErrorResponse) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGroupUsers", id, ctx)
	ret0, _ := ret[0].([]Dtos.UserResponse)
	ret1, _ := ret[1].(*Models.ErrorResponse)
	return ret0, ret1
}

// GetGroupUsers indicates an expected call of GetGroupUsers.
func (mr *MockGroupRepositoryMockRecorder) GetGroupUsers(id, ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroupUsers", reflect.TypeOf((*MockGroupRepository)(nil).GetGroupUsers), id, ctx)
}

// UpdateGroup mocks base method.
func (m *MockGroupRepository) UpdateGroup(id string, group Dtos.GroupUpdateRequest, ctx *gin.Context) (*Dtos.GroupResponse, *Models.ErrorResponse) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateGroup", id, group, ctx)
	ret0, _ := ret[0].(*Dtos.GroupResponse)
	ret1, _ := ret[1].(*Models.ErrorResponse)
	return ret0, ret1
}

// UpdateGroup indicates an expected call of UpdateGroup.
func (mr *MockGroupRepositoryMockRecorder) UpdateGroup(id, group, ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGroup", reflect.TypeOf((*MockGroupRepository)(nil).UpdateGroup), id, group, ctx)
}
